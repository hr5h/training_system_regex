[0][=Python]
# В Python, регулярные выражения доступны в библиотеке re.
# re – это модуль Python, содержащий методы для работы с регулярными выражениями.
import re
[=CS]
// Класс Regex и связанные с ним классы описаны в пространстве имен
// System.Text.RegularExpressions.
using System.Text.RegularExpressions;
[=CPP]
// В C++ регулярные выражения реализуются как часть библиотеки STL (Standard Template
// Library), и для работы с регулярными выражениями требуется использование класса regex и
// связанных с ним функций и методов.
#include <regex>
[------------------------------------------------------------------------------]
[1][=Python]
[text]
В первом задании нужно написать регулярное выражение в переменную regex. Функция
search найдет первое вхождение строке %{B}str%{b} по шаблону %{B}regex%{b}. И с помощью
цикла %{I}for%{i} выведем все найденные совпадения через функцию %{I}put%{i}.
%{S}Используйте специальные символы%{s}: \ - экранирование, для использования метасимволов
в качестве обычных.
%{S}Используйте функцию библиотеки re%{s}: Match re.search(regex, str) – метод ищет первую
подстроку в строке str, которая соответствует регулярному выражению regex.
[------------------------------------------------------------------------------]
[1][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    res = None
    if res:
        put(True)
    else:
        put(False)
[------------------------------------------------------------------------------]
[2][=Python]
[+W]
[text]
Во втором задании нужно написать регулярное выражение в переменную regex. С помощью
функции %{I}put%{i} выведите новую строку.
%{S}Используйте функцию библиотеки re%{s}: str re.sub(regex, replace, str) – метод
заменяет все вхождения выражения regex в строке str на заданную замену replace.
[------------------------------------------------------------------------------]
[2][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    res = None
    put(res)
[------------------------------------------------------------------------------]
[3][=Python]
[+W]
[text]
В третьем задании нужно написать регулярное выражение в переменную regex. С помощью
функции %{I}put%{i} выведите количество совпадений.
%{S}Используйте функцию библиотеки re%{s}: list<str> re.findall(regex, str) – метод ищет все
подстроки в строке str, которые соответствуют регулярному выражению regex;
[------------------------------------------------------------------------------]
[3][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    list = None
    put(len(list))
[------------------------------------------------------------------------------]
[4][=Python]
[+W]
[text]
В четвертом задании нужно написать регулярное выражение в переменную regex. С помощью
цикла %{I}for%{i} выведем все найденные совпадения через функцию %{I}put%{i}. Нужно вывести
позиции найденных по шаблону совпадений в строке.
[------------------------------------------------------------------------------]
[4][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    list = None
[------------------------------------------------------------------------------]
[5][=Python]
[+W]
[text]
В пятом задании нужно написать регулярное выражение в переменную regex. И вывести
 все найденные совпадения с помощью функции %{I}put%{i}.
[------------------------------------------------------------------------------]
[5][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    list = None
[------------------------------------------------------------------------------]

[0][=Python]
# В Python, регулярные выражения доступны в библиотеке re.
# re – это модуль Python, содержащий методы для работы с регулярными выражениями.
import re
[=CS]
// Класс Regex и связанные с ним классы описаны в пространстве имен
// System.Text.RegularExpressions.
using System.Text.RegularExpressions;
[=CPP]
// В C++ стандартная библиотека regex предоставляет набор классов и функций для
// работы с регулярными выражениями. 
#include <regex>
[------------------------------------------------------------------------------]
[1][=Python]
[text]
В первом задании достаточно написать регулярное выражение в переменную regex. Функция
findall найдет все вхождения в строке %{B}str%{b} по шаблону %{B}regex%{b}. И с помощью
цикла for выведем все найденные совпадения через функцию put.
%{S}Указание%{s}: Используйте множества символов: \d — десятичная цифра, т.е. [0-9].
Используйте квантификаторы: + — 1 или более соответствий.
Используйте функцию библиотеки re: list<str> re.findall(regex, str) – метод ищет все
подстроки в строке str, которые соответствуют регулярному выражению regex;
[------------------------------------------------------------------------------]
[1][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    list = re.findall(regex, str)
    for it in list:
        put(it)

[------------------------------------------------------------------------------]
[1][=Python]
[code]
# re.findall(regex, str) -  ищет все вхождения шаблона regex в строке `str`.
# \d+ - соответствует одному или более цифрам (0-9).
[------------------------------------------------------------------------------]
[2][=Python]
[+W]
[text]
Во втором задании нужно написать регулярное выражение в переменную regex. С помощью
цикла %{I}for%{i} выведем все найденные совпадения через функцию %{I}put%{i}.
%{S}Используйте множества символов%{s}: [a-d] — один из символов в диапазоне.
%{S}Используйте квантификаторы%{s}: + — 1 или более соответствий.
%{S}Используйте директивы нулевой длины%{s}: \b - позиция на границе слова.
%{S}Используйте функцию библиотеки re%{s}: list<str> re.findall(regex, str) – метод ищет все
подстроки в строке str, которые соответствуют регулярному выражению regex;
[------------------------------------------------------------------------------]
[2][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    list = re.findall(regex, str)
    for it in list:
        put(it)

[------------------------------------------------------------------------------]
[2][=Python]
[code]
# re.findall(regex, str) -  ищет все вхождения шаблона regex в строке `str`.
# `\b` -  граничная позиция, обозначающая начало или конец слова.
# `[A-Z]` - соответствует одной заглавной букве.
# `[a-z]+` - соответствует одной или более строчным буквам.
[------------------------------------------------------------------------------]
[3][=Python]
[+W]
[text]
В третьем задании нужно написать регулярное выражение в переменную regex. С помощью
цикла %{I}for%{i} выведем все найденные совпадения через функцию %{I}put%{i}.
%{S}Используйте множества символов%{s}: \w — словообразующий символ, например,
для английского языка - [a-zA-Z_0-9].
%{S}Используйте квантификаторы%{s}: {N} — точно N соответствий.
%{S}Используйте директивы нулевой длины%{s}: \b - позиция на границе слова.
%{S}Используйте функцию библиотеки re%{s}: list<str> re.findall(regex, str) – метод ищет все
подстроки в строке str, которые соответствуют регулярному выражению regex;
[------------------------------------------------------------------------------]
[3][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    list = re.findall(regex, str)
    for it in list:
        put(it)

[------------------------------------------------------------------------------]
[3][=Python]
[code]
# re.findall(regex, str) -  ищет все вхождения шаблона regex в строке `str`.
# `\b` -  граничная позиция, обозначающая начало или конец слова.
# `\w` -  соответствует букве, цифре или подчеркиванию.
# '{5}' - точно соответствует 5 раз.
[------------------------------------------------------------------------------]
[4][=Python]
[+W]
[text]
В четвертом задании нужно написать регулярное выражение в переменную regex. Переменная
replace уже инициализирована, она понадобится в функции sub, которая принимает строку
str, регулярное выражение regex и строку, которая заменит каждое вхождение по шаблону.
И с помощью функции %{I}put%{i} выведем новую строку res.
%{S}Используйте множества символов%{s}: \d — десятичная цифра, т.е. [0-9].
%{S}Используйте квантификаторы%{s}: + — 1 или более соответствий.
%{S}Используйте функцию библиотеки re%{s}: str re.sub(regex, replace, str) – метод
заменяет все вхождения выражения regex в строке str на заданную замену replace.
[------------------------------------------------------------------------------]
[4][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    replace = "число"
    res = re.sub(regex, replace, str)
    put(res)

[------------------------------------------------------------------------------]
[4][=Python]
[code]
# re.sub(regex, replace, str) – метод заменяет все вхождения шаблона 'regex' в строке 'str' на заданную замену 'replace'.
# `\d+` -  соответствует одной или более цифрам.
[------------------------------------------------------------------------------]
[5][=Python]
[+W]
[text]
В пятом задании нужно написать регулярное выражение в переменную regex. С помощью
цикла %{I}for%{i} выведем все найденные совпадения через функцию %{I}put%{i}.
%{S}Используйте множества символов%{s}: \d — десятичная цифра, т.е. [0-9].
%{S}Используйте квантификаторы%{s}: {N} — точно N соответствий.
%{S}Используйте функцию библиотеки re%{s}: list<str> re.findall(regex, str) – метод ищет все
подстроки в строке str, которые соответствуют регулярному выражению regex;
[------------------------------------------------------------------------------]
[5][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    list = re.findall(regex, str)
    for it in list:
        put(it)

[------------------------------------------------------------------------------]
[5][=Python]
[code]
# re.findall(regex, str) -  ищет все вхождения шаблона regex в строке `str`.
# `\d{2}` -  соответствует двум цифрам.
# `\.` -  соответствует символу точки.
# `\d{4}` -  соответствует четерым цифрам.
[------------------------------------------------------------------------------]
[6][=Python]
[+W]
[text]
В шестом задании нужно написать регулярное выражение в переменную regex. Переменная
replace уже инициализирована, она понадобится в функции sub, которая принимает строку
str, регулярное выражение regex и строку, которая заменит каждое вхождение по шаблону.
И с помощью функции %{I}put%{i} выведем новую строку res.
%{S}Используйте множества символов%{s}: \s - пробельный символ, например, для английского
языка - [a-zA-Z_0-9].
%{S}Используйте функцию библиотеки re%{s}: str re.sub(regex, replace, str) – метод
заменяет все вхождения выражения regex в строке str на заданную замену replace.
[------------------------------------------------------------------------------]
[6][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    replace = "_"
    res = re.sub(regex, replace, str)
    put(res)

[------------------------------------------------------------------------------]
[6][=Python]
[code]
# re.sub(regex, replace, str) – метод заменяет все вхождения шаблона 'regex' в строке 'str' на заданную замену 'replace'.
# `\s` - соответствует любому пробельному символу.
[------------------------------------------------------------------------------]
[7][=Python]
[+W]
[text]
В седьмом задании нужно написать регулярное выражение в переменную regex. С помощью
цикла %{I}for%{i} выведем все найденные совпадения через функцию %{I}put%{i}.
%{S}Используйте множества символов%{s}: \w — словообразующий символ, например,
для английского языка - [a-zA-Z_0-9].
%{S}Используйте квантификаторы%{s}: + — 1 или более соответствий.
%{S}Используйте функцию библиотеки re%{s}: list<str> re.findall(regex, str) – метод ищет все
подстроки в строке str, которые соответствуют регулярному выражению regex;
[------------------------------------------------------------------------------]
[7][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    list = re.findall(regex, str)
    for it in list:
        put(it)

[------------------------------------------------------------------------------]
[7][=Python]
[code]
# re.findall(regex, str) -  ищет все вхождения шаблона regex в строке `str`.
# `#\w+` -  ищет хэштеги, начинающиеся с символа #, за которым следуют буквы, цифры или подчеркивания.
[------------------------------------------------------------------------------]
[8][=Python]
[+W]
[text]
В восьмом задании нужно написать регулярное выражение в переменную regex. С помощью
цикла %{I}for%{i} выведем все найденные совпадения через функцию %{I}put%{i}.
%{S}Используйте множества символов%{s}: \s - пробельный символ, например, для английского
языка - [a-zA-Z_0-9].
%{S}Используйте квантификаторы%{s}: + — 1 или более соответствий.
%{S}Используйте функцию библиотеки re%{s}: Match re.search(regex, str) – метод ищет первую
подстроку в строке str, которая соответствует регулярному выражению regex.
[------------------------------------------------------------------------------]
[8][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    res = re.search(regex, str)
    if res:
        put(True)
    else:
        put(False)

[------------------------------------------------------------------------------]
[8][=Python]
[code]
# `re.search(pattern, string)` -  ищет первое вхождение шаблона `regex` в строке`str`.
# `\s+` -  соответствует одному или более пробельным символам.
[------------------------------------------------------------------------------]

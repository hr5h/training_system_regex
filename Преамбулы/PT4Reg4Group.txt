[0][=Python]
# В Python, регулярные выражения доступны в библиотеке re.
# re – это модуль Python, содержащий методы для работы с регулярными выражениями.
import re
[=CS]
// Класс Regex и связанные с ним классы описаны в пространстве имен
// System.Text.RegularExpressions.
using System.Text.RegularExpressions;
[=CPP]
// В C++ регулярные выражения реализуются как часть библиотеки STL (Standard Template
// Library), и для работы с регулярными выражениями требуется использование класса regex и
// связанных с ним функций и методов.
#include <regex>
[------------------------------------------------------------------------------]
[1][=Python]
[text]
В первом задании нужно написать регулярное выражение в переменную regex. Функция
findall найдет все вхождения в строке %{B}str%{b} по шаблону %{B}regex%{b}.
С помощью цикла %{I}for%{i} найдем все совпадения, которые принадлежат к 1 или 2 группе
и выведем их количества с помощью функции %{I}put%{i}.
%{S}Используйте группирование и ссылки на группы%{s}: (expr) - включить соответствие для
выражения expr в нумерованную группу (группы нумеруется от 1 в соответствии с порядком
следования их открывающих скобок; группа 0 соответствует всему найденному вхождению).
%{S}Используйте функцию библиотеки re%{s}: list<str> re.findall(regex, str) – метод ищет все
подстроки в строке str, которые соответствуют регулярному выражению regex;
[------------------------------------------------------------------------------]
[1][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    matches = None
    uppercasewords = [m[0] for m in matches if m[0]]
    lowercasewords = [m[1] for m in matches if m[1]]
    put(len(uppercasewords))
    put(len(lowercasewords))
[------------------------------------------------------------------------------]
[2][=Python]
[+W]
[text]
Во втором задании нужно написать регулярное выражение в переменную regex. С помощью
цикла %{I}for%{i} выведем все найденные совпадения через функцию %{I}put%{i}.
%{S}Используйте группирование и ссылки на группы%{s}: (?P<name>expr) – включить
соответствие для выражения expr в именованную группу с именем name; Именнованная
группа также является нумерованной группой, как если бы группа не была названа.
(?P=name) – ссылка на группу с именем name.
[------------------------------------------------------------------------------]
[2][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    matches = None
    for it in matches:
        phone, name = it
        put(f"Tel: {phone} Name: {name}")
[------------------------------------------------------------------------------]
[3][=Python]
[+W]
[text]
В третьем задании нужно написать регулярное выражение в переменную regex. Выведем
найденные совпадения с помощью функции %{I}put%{i}.
%{S}Используйте группирование и ссылки на группы%{s}: \1 — соответствует символу из группы '1'.
Пример: Регулярное выражение R"(A|B)\1" будет соответствовать строке "AA" или "BB".
%{S}Используйте функцию библиотеки re%{s}: str re.sub(regex, replace, str) – метод
заменяет все вхождения выражения regex в строке str на заданную замену replace.
[------------------------------------------------------------------------------]
[3][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    replace = None
    res = None
    put(res)
[------------------------------------------------------------------------------]

[0][=Python]
# В Python, регулярные выражения доступны в библиотеке re.
# re – это модуль Python, содержащий методы для работы с регулярными выражениями.
import re
[=CS]
// Класс Regex и связанные с ним классы описаны в пространстве имен
// System.Text.RegularExpressions.
using System.Text.RegularExpressions;
[=CPP]
// В C++ стандартная библиотека regex предоставляет набор классов и функций для
// работы с регулярными выражениями. 
#include <regex>
[------------------------------------------------------------------------------]
[1][=Python]
[text]
В первом задании нужно написать регулярное выражение в переменную regex. Выведем
все найденные совпадения с помощью функции %{I}put%{i}.
%{S}Указание%{s}. Используйте квантификатор: + — 1 или более соответствий.
Используйте функцию библиотеки re: list<str> re.findall(regex, str) – метод ищет все
подстроки в строке str, которые соответствуют регулярному выражению regex;
Используйте флаг поиска: re.I - игнорирует регистр символов.(list<str> re.findall(regex, str, [flags]))
[------------------------------------------------------------------------------]
[1][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    list = None
[------------------------------------------------------------------------------]
[2][=Python]
[+W]
[text]
Во втором задании нужно написать регулярное выражение в переменную regex. Выведем
все найденные совпадения с помощью функции %{I}put%{i}.
%{S}Указание%{s}. Используйте квантификатор: * — 0 или более соответствий.
[------------------------------------------------------------------------------]
[2][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    list = None
[------------------------------------------------------------------------------]
[3][=Python]
[+W]
[text]
В третьем задании нужно написать регулярное выражение в переменную regex. Выведем
количество совпадений с помощью функции %{I}put%{i}.
%{S}Указание%{s}. Используйте квантификатор: {N,} — не менее N соответствий.
[------------------------------------------------------------------------------]
[3][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    list = None
[------------------------------------------------------------------------------]
[4][=Python]
[+W]
[text]
В четвертом задании нужно написать регулярное выражение в переменную regex. Выведем
 позиции найденных по шаблону совпадений в строке с помощью функции %{I}put%{i}.
[------------------------------------------------------------------------------]
[4][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    list = None
[------------------------------------------------------------------------------]
[5][=Python]
[+W]
[text]
В пятом задании нужно написать регулярное выражение в переменную regex. Выведем
найденные совпадения с помощью функции %{I}put%{i}.
%{S}Указание%{s}. Используйте квантификатор: {N} — точно N соответствий.
[------------------------------------------------------------------------------]
[5][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    list = None
[------------------------------------------------------------------------------]
[6][=Python]
[+W]
[text]
В шестом задании нужно написать регулярное выражение в переменную regex. Выведем
найденные совпадения с помощью функции %{I}put%{i}.
[------------------------------------------------------------------------------]
[6][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    list = None
[------------------------------------------------------------------------------]
[7][=Python]
[+W]
[text]
В седьмом задании нужно написать регулярное выражение в переменную regex. Выведем
найденные совпадения с помощью функции %{I}put%{i}.
%{S}Указание%{s}. Используйте квантификатор: {N, M} — от N до M соответствий.
[------------------------------------------------------------------------------]
[7][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    list = None
[------------------------------------------------------------------------------]
[8][=Python]
[+W]
[text]
В восьмом задании нужно написать регулярное выражение в переменную regex. Выведем
найденные совпадения с помощью функции %{I}put%{i}.
%{S}Указание%{s}. Используйте множества символов: \s — пробельный символ.
Используйте функцию библиотеки re: str re.sub(regex, replace, str) – метод
заменяет все вхождения выражения regex в строке str на заданную замену replace.
[------------------------------------------------------------------------------]
[8][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    replace = None
    res = None
    put(res)
[------------------------------------------------------------------------------]
[9][=Python]
[+W]
[text]
В девятом задании нужно написать регулярное выражение в переменную regex. Выведем
найденные совпадения с помощью функции %{I}put%{i}.
%{S}Указание%{s}. Используйте квантификатор: ? — 0 или 1 соответствие.
Используйте функцию библиотеки re: Match re.search(regex, str) – метод ищет первую
подстроку в строке str, которая соответствует регулярному выражению regex.
[------------------------------------------------------------------------------]
[9][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    res = None
    if res:
        put(True)
    else:
        put(False)
[------------------------------------------------------------------------------]

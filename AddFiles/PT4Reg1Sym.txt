[0][=Python]
# В Python, регулярные выражения доступны в библиотеке re.
# re – это модуль Python, содержащий методы для работы с регулярными выражениями.
import re
[=CS]
// Класс Regex и связанные с ним классы описаны в пространстве имен
// System.Text.RegularExpressions.
using System.Text.RegularExpressions;
[=CPP]
// В C++ стандартная библиотека regex предоставляет набор классов и функций для
// работы с регулярными выражениями. 
#include <regex>
[------------------------------------------------------------------------------]
[1][=Python]
[text]
В первом задании достаточно написать регулярное выражение в переменную regex. Функция
findall найдет все вхождения в строке %{B}str%{b} по шаблону %{B}regex%{b}. И с помощью
цикла %{I}for%{i} выведем все найденные совпадения через функцию %{I}put%{i}.
%{S}Указание%{s}. Используйте множества символов: [abcd] — один из символов в списке.
Используйте функцию библиотеки re: list<str> re.findall(regex, str) – метод ищет все
подстроки в строке str, которые соответствуют регулярному выражению regex;
[------------------------------------------------------------------------------]
[1][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    list = None
    for it in list:
        put(it)
[------------------------------------------------------------------------------]
[2][=Python]
[+W]
[text]
Во втором задании нужно написать регулярное выражение в переменную regex. С помощью
цикла %{I}for%{i} выведем все найденные совпадения через функцию %{I}put%{i}. Но теперь
нужно вывести не результат поиска, а позиции найденных по шаблону совпадений в строке.
%{S}Указание%{s}. Используйте множества символов: [a-d] — один из символов в диапазоне.
[------------------------------------------------------------------------------]
[2][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    list = None
    for it in list:
        put()
[------------------------------------------------------------------------------]
[3][=Python]
[+W]
[text]
В третьем задании нужно написать регулярное выражение в переменную regex.
С помощью функции %{I}len%{i} выведем количество найденных совпадений через функцию %{I}put%{i}.
%{S}Указание%{s}. Используйте множества символов: [abcd] — один из символов в списке (отрицание: [^abcd]).
Используйте флаг поиска: re.I - игнорирует регистр символов.(list<str> re.findall(regex, str, [flags]))
[------------------------------------------------------------------------------]
[3][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    list = None
    put(len(list))
[------------------------------------------------------------------------------]
[4][=Python]
[+W]
[text]
В четвертом задании нужно написать регулярное выражение в переменную regex. С помощью
цикла %{I}for%{i} выведем все найденные совпадения через функцию %{I}put%{i}. Нужно вывести
результат поиска в определенном формате.
[------------------------------------------------------------------------------]
[4][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    list = None
    count = None
    for it in list:
        put(f"{count}) {it};")
[------------------------------------------------------------------------------]
[5][=Python]
[+W]
[text]
В пятом задании нужно написать регулярное выражение в переменную regex. Переменная
replace уже инициализирована, она понадобится в функции sub, которая принимает строку
str, регулярное выражение regex и строку, которая заменит каждое вхождение по шаблону.
И с помощью функции %{I}put%{i} выведем новую строку res.
%{S}Указание%{s}. Используйте функцию библиотеки re: str re.sub(regex, replace, str) – метод
заменяет все вхождения выражения regex в строке str на заданную замену replace.
[------------------------------------------------------------------------------]
[5][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    replace = None
    res = None
    put(res)
[------------------------------------------------------------------------------]
[6][=Python]
[+W]
[text]
В шестом задании нужно написать регулярное выражение в переменную regex.
C помощью функции %{I}put%{i} выведем все найденные совпадения.
%{S}Указание%{s}. Используйте множества символов: \d — десятичная цифра, т.е.[0-9].
Используйте множества символов: \w — словообразующий символ, например,
для английского языка - [a-zA-Z_0-9].
[------------------------------------------------------------------------------]
[6][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    list = None
[------------------------------------------------------------------------------]
[7][=Python]
[+W]
[text]
В седьмом задании нужно написать регулярное выражение в переменную regex.
C помощью функции %{I}put%{i} выведем все найденные совпадения.
[------------------------------------------------------------------------------]
[7][=Python]
[-W]
[code]
def solve():
    task("%{task}")
    str = get_str()
    regex = R""
    list = None
[------------------------------------------------------------------------------]
